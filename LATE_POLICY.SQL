CREATE TABLE HR_MONTHLY_ATTENDANCE_SUMMARY (
    ID                         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    RML_ID                     VARCHAR2(20),
    MONTH_PERIOD               VARCHAR2(7), -- e.g., '2025-07'
    EMP_NAME                   VARCHAR2(100),
    DEPT_NAME                  VARCHAR2(100),
    DESIGNATION                VARCHAR2(100),
    EMP_GROUP                  VARCHAR2(50),
    CONCERN                    VARCHAR2(100),
    TOTAL_PRESENT_DAYS         NUMBER,
    UNAPPROVED_LEAVE           NUMBER,
    UNAUTHORIZED_ABSENT        NUMBER,
    ABSENT_SALARY_REDUCE       NUMBER , --(CREATE TRIGGER TO UPDATE THIS FIELD -> UNAUTHORIZED_ABSENT)
    PREVIOUS_EARN_LEAVE_BALANCE NUMBER,
    CURRENT_EARN_LEAVE_BALANCE         NUMBER,
    TOTAL_EARN_LEAVE_BALANCE   NUMBER, --(CREATE TRIGGER TO UPDATE THIS FIELD -> PREVIOUS_LEAVE_BALANCE + CURRENT_EARN_LEAVE_BALANCE)
    TOTAL_LATE_COUNT           NUMBER,
    LEVEL_DEDUCTED_COUNT       NUMBER, --(CREATE TRIGGER TO UPDATE THIS FIELD -> TOTAL_LATE_COUNT / 3)
    TOTAL_LEAVE_DEDUCTED       NUMBER, --(CREATE TRIGGER TO UPDATE THIS FIELD may month to current month - 1 (current previous month))
    LEAVE_BALANCE              NUMBER, --(CREATE TRIGGER TO UPDATE THIS FIELD -> TOTAL_EARN_LEAVE_BALANCE  - TOTAL_LEAVE_DEDUCTED),
    SALARY_DEDUCTED_FOR_LEAVE  NUMBER, --(CREATE TRIGGER TO UPDATE THIS FIELD -> TOTAL_LEAVE_DEDUCTED)
    TOTAL_SALARY_DEDUCTIONS    NUMBER, --(if concern has EL leave then )
    JUSTIFICATIONS_SUBMITTED    NUMBER,
    DISCIPLINARY_ACTION_FLAG    VARCHAR2(1) DEFAULT 'N' CHECK (DISCIPLINARY_ACTION_FLAG IN ('Y', 'N')),
    LAST_UPDATED_AT            DATE,
    CONSTRAINT uq_rml_month UNIQUE (RML_ID, MONTH_PERIOD)
);


CREATE OR REPLACE PROCEDURE UPSERT_MONTHLY_ATTENDANCE_SUMMARY IS
    v_month_period VARCHAR2(7) := TO_CHAR(SYSDATE, 'YYYY-MM');
BEGIN
    FOR rec IN (
        SELECT 
            HR_USER.RML_ID,
            HR_USER.EMP_NAME,
            HR_USER.DEPT_NAME,
            HR_USER.DESIGNATION,
            HR_USER.EMP_GROUP,
            HR_USER.R_CONCERN AS CONCERN,

            -- Total Present Days
            (SELECT COUNT(*)
             FROM RML_HR_ATTN_DAILY_PROC ATTN
             WHERE ATTN.RML_ID = HR_USER.RML_ID
               AND TRUNC(ATTN.ATTN_DATE) BETWEEN TRUNC(SYSDATE, 'MM') AND TRUNC(SYSDATE)
               AND ATTN.STATUS = 'P') AS TOTAL_PRESENT_DAYS,

            -- Unapproved Leave + Tour
            (SELECT COUNT(*)
             FROM RML_HR_EMP_LEAVE L
             WHERE L.RML_ID = HR_USER.RML_ID
               AND L.START_DATE <= TRUNC(SYSDATE)
               AND L.END_DATE >= TRUNC(SYSDATE, 'MM')
               AND L.IS_APPROVED IS NULL)
            +
            (SELECT COUNT(*)
             FROM RML_HR_EMP_TOUR T
             WHERE T.RML_ID = HR_USER.RML_ID
               AND T.START_DATE <= TRUNC(SYSDATE)
               AND T.END_DATE >= TRUNC(SYSDATE, 'MM')
               AND T.LINE_MANAGER_APPROVAL_STATUS IS NULL)
            AS UNAPPROVED_LEAVE,

            -- Absent
            (SELECT COUNT(*)
             FROM RML_HR_ATTN_DAILY_PROC ATTN
             WHERE ATTN.RML_ID = HR_USER.RML_ID
               AND TRUNC(ATTN.ATTN_DATE) BETWEEN TRUNC(SYSDATE, 'MM') AND TRUNC(SYSDATE)
               AND ATTN.STATUS = 'A') AS UNAUTHORIZE_ABSENT,

            -- Late
            (SELECT COUNT(*)
             FROM RML_HR_ATTN_DAILY_PROC ATTN
             WHERE ATTN.RML_ID = HR_USER.RML_ID
               AND TRUNC(ATTN.ATTN_DATE) BETWEEN TRUNC(SYSDATE, 'MM') AND TRUNC(SYSDATE)
               AND ATTN.STATUS = 'L') AS TOTAL_LATE_COUNT,

            -- Leave Deduction for Late
            (SELECT FLOOR(COUNT(*) / 3)
             FROM RML_HR_ATTN_DAILY_PROC ATTN
             WHERE ATTN.RML_ID = HR_USER.RML_ID
               AND TRUNC(ATTN.ATTN_DATE) BETWEEN TRUNC(SYSDATE, 'MM') AND TRUNC(SYSDATE)
               AND ATTN.STATUS = 'L') AS LEVEL_DEDUCTED_COUNT,
               -- PREVIOUS_EARN_LEAVE_BALANCE
               (SELECT CARRY_EL
                FROM LATE_POLICY.CARRY_EARN_LEAVE
                WHERE RML_ID = HR_USER.RML_ID
                  AND YEAR_PERIOD = (TO_CHAR(SYSDATE, 'YYYY') - 1)
                ) AS PREVIOUS_EARN_LEAVE_BALANCE,
            -- Current Earn Leave Balance
            (SELECT RML_ID,LEAVE_TYPE,
                                LEAVE_PERIOD,
                                LEAVE_ASSIGN,
                                LEAVE_TAKEN,
                                LATE_LEAVE
                        FROM LEAVE_DETAILS_INFORMATION
                        WHERE RML_ID=HR_USER.RML_ID
                        and LEAVE_PERIOD=TO_CHAR(SYSDATE, 'YYYY')
                        AND LEAVE_TYPE in ('EL')) AS CURRENT_EARN_LEAVE_BALANCE

        FROM RML_HR_APPS_USER HR_USER
        WHERE HR_USER.IS_ACTIVE = 1
    )
    LOOP
        MERGE INTO HR_MONTHLY_ATTENDANCE_SUMMARY dst
        USING (SELECT 1 FROM DUAL) src
        ON (dst.RML_ID = rec.RML_ID AND dst.MONTH_PERIOD = v_month_period)
        WHEN MATCHED THEN
            UPDATE SET
                EMP_NAME             = rec.EMP_NAME,
                DEPT_NAME            = rec.DEPT_NAME,
                DESIGNATION          = rec.DESIGNATION,
                EMP_GROUP            = rec.EMP_GROUP,
                CONCERN              = rec.CONCERN,
                TOTAL_PRESENT_DAYS   = rec.TOTAL_PRESENT_DAYS,
                UNAPPROVED_LEAVE     = rec.UNAPPROVED_LEAVE,
                UNAUTHORIZE_ABSENT   = rec.UNAUTHORIZE_ABSENT,
                TOTAL_LATE_COUNT     = rec.TOTAL_LATE_COUNT,
                LEVEL_DEDUCTED_COUNT = rec.LEVEL_DEDUCTED_COUNT,
                CURRENT_EARN_LEAVE_BALANCE   = rec.CURRENT_EARN_LEAVE_BALANCE,
                PREVIOUS_EARN_LEAVE_BALANCE   = rec.PREVIOUS_EARN_LEAVE_BALANCE,
                LAST_UPDATED_AT      = SYSDATE
        WHEN NOT MATCHED THEN
            INSERT (
                RML_ID, MONTH_PERIOD, EMP_NAME, DEPT_NAME, DESIGNATION, EMP_GROUP,
                CONCERN, TOTAL_PRESENT_DAYS, UNAPPROVED_LEAVE, UNAUTHORIZE_ABSENT,
                TOTAL_LATE_COUNT, LEVEL_DEDUCTED_COUNT, CURRENT_EARN_LEAVE_BALANCE, LAST_UPDATED_AT
            ) VALUES (
                rec.RML_ID, v_month_period, rec.EMP_NAME, rec.DEPT_NAME, rec.DESIGNATION, rec.EMP_GROUP,
                rec.CONCERN, rec.TOTAL_PRESENT_DAYS, rec.UNAPPROVED_LEAVE, rec.UNAUTHORIZE_ABSENT,
                rec.TOTAL_LATE_COUNT, rec.LEVEL_DEDUCTED_COUNT, rec.CURRENT_EARN_LEAVE_BALANCE, SYSDATE
            );
    END LOOP;

    COMMIT;
END;




BEGIN
  DBMS_SCHEDULER.CREATE_JOB (
    job_name        => 'MONTHLY_ATTN_SUMMARY_1PM',
    job_type        => 'STORED_PROCEDURE',
    job_action      => 'UPSERT_MONTHLY_ATTENDANCE_SUMMARY',
    start_date      => SYSTIMESTAMP,
    repeat_interval => 'FREQ=DAILY;BYHOUR=13;BYMINUTE=0',
    enabled         => TRUE
  );
END;

BEGIN
  DBMS_SCHEDULER.CREATE_JOB (
    job_name        => 'MONTHLY_ATTN_SUMMARY_10PM',
    job_type        => 'STORED_PROCEDURE',
    job_action      => 'UPSERT_MONTHLY_ATTENDANCE_SUMMARY',
    start_date      => SYSTIMESTAMP,
    repeat_interval => 'FREQ=DAILY;BYHOUR=22;BYMINUTE=0',
    enabled         => TRUE
  );
END;

CREATE OR REPLACE TRIGGER trg_update_absent_salary_reduce
BEFORE INSERT OR UPDATE ON HR_MONTHLY_ATTENDANCE_SUMMARY
FOR EACH ROW
BEGIN
    :NEW.ABSENT_SALARY_REDUCE := NVL(:NEW.UNAUTHORIZED_ABSENT, 0);
END;
/

-- CREATE OR REPLACE TRIGGER trg_update_total_earn_leave_balance
-- BEFORE INSERT OR UPDATE ON HR_MONTHLY_ATTENDANCE_SUMMARY
-- FOR EACH ROW
-- BEGIN
--     :NEW.TOTAL_EARN_LEAVE_BALANCE := NVL(:NEW.PREVIOUS_EARN_LEAVE_BALANCE, 0) + NVL(:NEW.CURRENT_EARN_LEAVE_BALANCE, 0);
-- END;
-- /

CREATE OR REPLACE TRIGGER trg_update_level_deducted_count
BEFORE INSERT OR UPDATE ON HR_MONTHLY_ATTENDANCE_SUMMARY
FOR EACH ROW
BEGIN
    :NEW.LEVEL_DEDUCTED_COUNT := FLOOR(NVL(:NEW.TOTAL_LATE_COUNT, 0) / 3);
END;
/
CREATE OR REPLACE TRIGGER trg_update_total_leave_deducted
BEFORE INSERT OR UPDATE ON HR_MONTHLY_ATTENDANCE_SUMMARY
FOR EACH ROW
BEGIN
    :NEW.TOTAL_LEAVE_DEDUCTED := NVL(:NEW.ABSENT_SALARY_REDUCE, 0) + NVL(:NEW.LEVEL_DEDUCTED_COUNT, 0);
END;
/


CREATE OR REPLACE TRIGGER trg_update_leave_balance
BEFORE INSERT OR UPDATE ON HR_MONTHLY_ATTENDANCE_SUMMARY
FOR EACH ROW
BEGIN
    :NEW.LEAVE_BALANCE := NVL(:NEW.TOTAL_EARN_LEAVE_BALANCE, 0) - NVL(:NEW.TOTAL_LEAVE_DEDUCTED, 0);
END;
/
CREATE OR REPLACE TRIGGER trg_update_salary_deducted_for_leave
BEFORE INSERT OR UPDATE ON HR_MONTHLY_ATTENDANCE_SUMMARY
FOR EACH ROW
BEGIN
    :NEW.SALARY_DEDUCTED_FOR_LEAVE := NVL(:NEW.TOTAL_LEAVE_DEDUCTED, 0);
END;
/
