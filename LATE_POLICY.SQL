CREATE TABLE HR_MONTHLY_ATTENDANCE_SUMMARY (
    ID                         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    RML_ID                     VARCHAR2(20),
    MONTH_PERIOD               VARCHAR2(7), -- e.g., '2025-07'
    EMP_NAME                   VARCHAR2(100),
    DEPT_NAME                  VARCHAR2(100),
    DESIGNATION                VARCHAR2(100),
    EMP_GROUP                  VARCHAR2(50),
    CONCERN                    VARCHAR2(100),
    TOTAL_PRESENT_DAYS         NUMBER,
    UNAPPROVED_LEAVE           NUMBER,
    UNAUTHORIZED_ABSENT        NUMBER,
    ABSENT_SALARY_REDUCE       NUMBER , --(CREATE TRIGGER TO UPDATE THIS FIELD -> UNAUTHORIZED_ABSENT)
    PREVIOUS_EARN_LEAVE_BALANCE NUMBER,
    CURRENT_EARN_LEAVE_BALANCE         NUMBER,
    TOTAL_EARN_LEAVE_BALANCE   NUMBER, --(CREATE TRIGGER TO UPDATE THIS FIELD -> PREVIOUS_LEAVE_BALANCE + CURRENT_EARN_LEAVE_BALANCE)
    TOTAL_LATE_COUNT           NUMBER,
    LEVEL_DEDUCTED_COUNT_CUR_MONTH       NUMBER, --(CREATE TRIGGER TO UPDATE THIS FIELD -> TOTAL_LATE_COUNT / 3)
    TOTAL_LEAVE_DEDUCTED_ON_TODAY       NUMBER, --(CREATE TRIGGER TO UPDATE THIS FIELD may month to current month)
    LEAVE_BALANCE              NUMBER, --(CREATE TRIGGER TO UPDATE THIS FIELD -> TOTAL_EARN_LEAVE_BALANCE  - TOTAL_LEAVE_DEDUCTED_ON_TODAY),
    SALARY_DEDUCTED_FOR_LEAVE  NUMBER, --(CREATE TRIGGER TO UPDATE THIS FIELD -> TOTAL_LEAVE_DEDUCTED_ON_TODAY)
    TOTAL_SALARY_DEDUCTIONS    NUMBER, --(if concern has EL leave then )
    JUSTIFICATIONS_SUBMITTED    NUMBER,
    DISCIPLINARY_ACTION_FLAG    VARCHAR2(1) DEFAULT 'N' CHECK (DISCIPLINARY_ACTION_FLAG IN ('Y', 'N')),
    LAST_UPDATED_AT            DATE,
    CONSTRAINT uq_rml_month UNIQUE (RML_ID, MONTH_PERIOD)
);


CREATE OR REPLACE PROCEDURE UPSERT_MONTHLY_ATTENDANCE_SUMMARY(p_month_period IN VARCHAR2) IS
BEGIN
    FOR rec IN (
        SELECT 
            HR_USER.RML_ID,
            HR_USER.EMP_NAME,
            HR_USER.DEPT_NAME,
            HR_USER.DESIGNATION,
            HR_USER.EMP_GROUP,
            HR_USER.R_CONCERN AS CONCERN,

            -- Directly from summary table
            LATE_SUMMARY.TOTAL_PRESENT           AS TOTAL_PRESENT_DAYS,
            LATE_SUMMARY.UNAUTHORIZE_ABSENT,
            LATE_SUMMARY.TOTAL_LATE              AS TOTAL_LATE_COUNT,
            LATE_SUMMARY.DEDUCTION_EL            AS LEVEL_DEDUCTED_COUNT_CUR_MONTH,

            -- Unapproved Leave + Tour
            (
                SELECT COUNT(*) FROM RML_HR_EMP_LEAVE L
                WHERE L.RML_ID = HR_USER.RML_ID
                  AND L.START_DATE <= TRUNC(SYSDATE)
                  AND L.END_DATE >= TRUNC(SYSDATE, 'MM')
                  AND L.IS_APPROVED IS NULL
            )
            +
            (
                SELECT COUNT(*) FROM RML_HR_EMP_TOUR T
                WHERE T.RML_ID = HR_USER.RML_ID
                  AND T.START_DATE <= TRUNC(SYSDATE)
                  AND T.END_DATE >= TRUNC(SYSDATE, 'MM')
                  AND T.LINE_MANAGER_APPROVAL_STATUS IS NULL
            ) AS UNAPPROVED_LEAVE,

            -- Previous Earned Leave Balance
            (
                SELECT CARRY_EL
                FROM LATE_POLICY.CARRY_EARN_LEAVE
                WHERE RML_ID = HR_USER.RML_ID
                  AND YEAR_PERIOD = TO_CHAR(SYSDATE, 'YYYY') - 1
            ) AS PREVIOUS_EARN_LEAVE_BALANCE,

            -- Current Earn Leave Balance
            (
                SELECT LEAVE_ASSIGN - LEAVE_TAKEN
                FROM LEAVE_DETAILS_INFORMATION
                WHERE RML_ID = HR_USER.RML_ID
                  AND LEAVE_PERIOD = TO_CHAR(SYSDATE, 'YYYY')
                  AND LEAVE_TYPE = 'EL'
            ) AS CURRENT_EARN_LEAVE_BALANCE

        FROM RML_HR_APPS_USER HR_USER
        LEFT JOIN LATE_POLICY.MONTH_WISE_LATE_COUNT_WITH_DEDUCTION_EL LATE_SUMMARY
            ON HR_USER.RML_ID = LATE_SUMMARY.RML_ID 
           AND LATE_SUMMARY.MONTH_PERIOD = p_month_period
        WHERE HR_USER.IS_ACTIVE = 1
    )
    LOOP
        MERGE INTO HR_MONTHLY_ATTENDANCE_SUMMARY dst
        USING (SELECT 1 FROM DUAL) src
        ON (dst.RML_ID = rec.RML_ID AND dst.MONTH_PERIOD = p_month_period)
        WHEN MATCHED THEN
            UPDATE SET
                EMP_NAME                         = rec.EMP_NAME,
                DEPT_NAME                        = rec.DEPT_NAME,
                DESIGNATION                      = rec.DESIGNATION,
                EMP_GROUP                        = rec.EMP_GROUP,
                CONCERN                          = rec.CONCERN,
                TOTAL_PRESENT_DAYS               = rec.TOTAL_PRESENT_DAYS,
                UNAPPROVED_LEAVE                 = rec.UNAPPROVED_LEAVE,
                UNAUTHORIZE_ABSENT               = rec.UNAUTHORIZE_ABSENT,
                TOTAL_LATE_COUNT                 = rec.TOTAL_LATE_COUNT,
                LEVEL_DEDUCTED_COUNT_CUR_MONTH  = rec.LEVEL_DEDUCTED_COUNT_CUR_MONTH,
                CURRENT_EARN_LEAVE_BALANCE       = rec.CURRENT_EARN_LEAVE_BALANCE,
                PREVIOUS_EARN_LEAVE_BALANCE      = rec.PREVIOUS_EARN_LEAVE_BALANCE,
                LAST_UPDATED_AT                  = SYSDATE
        WHEN NOT MATCHED THEN
            INSERT (
                RML_ID, MONTH_PERIOD, EMP_NAME, DEPT_NAME, DESIGNATION, EMP_GROUP,
                CONCERN, TOTAL_PRESENT_DAYS, UNAPPROVED_LEAVE, UNAUTHORIZE_ABSENT,
                TOTAL_LATE_COUNT, LEVEL_DEDUCTED_COUNT_CUR_MONTH,
                CURRENT_EARN_LEAVE_BALANCE, PREVIOUS_EARN_LEAVE_BALANCE, LAST_UPDATED_AT
            ) VALUES (
                rec.RML_ID, p_month_period, rec.EMP_NAME, rec.DEPT_NAME, rec.DESIGNATION, rec.EMP_GROUP,
                rec.CONCERN, rec.TOTAL_PRESENT_DAYS, rec.UNAPPROVED_LEAVE, rec.UNAUTHORIZE_ABSENT,
                rec.TOTAL_LATE_COUNT, rec.LEVEL_DEDUCTED_COUNT_CUR_MONTH,
                rec.CURRENT_EARN_LEAVE_BALANCE, rec.PREVIOUS_EARN_LEAVE_BALANCE, SYSDATE
            );
    END LOOP;

    COMMIT;
END;
/

EXEC UPSERT_MONTHLY_ATTENDANCE_SUMMARY('08-2025');



//DONE
CREATE OR REPLACE TRIGGER trg_update_total_earn_leave_balance
BEFORE INSERT OR UPDATE ON HR_MONTHLY_ATTENDANCE_SUMMARY
FOR EACH ROW
BEGIN
    :NEW.TOTAL_EARN_LEAVE_BALANCE := NVL(:NEW.PREVIOUS_EARN_LEAVE_BALANCE, 0) + NVL(:NEW.CURRENT_EARN_LEAVE_BALANCE, 0);
END;
/


//DONE
CREATE OR REPLACE TRIGGER trg_update_level_deducted_count
BEFORE INSERT OR UPDATE ON HR_MONTHLY_ATTENDANCE_SUMMARY
FOR EACH ROW
BEGIN
    :NEW.LEVEL_DEDUCTED_COUNT_CUR_MONTH := FLOOR(NVL(:NEW.TOTAL_LATE_COUNT, 0) / 3);
END;
/

CREATE OR REPLACE PROCEDURE DEV_PROCEDURE.PROC_UPDATE_LATE_EL_DEDUCTION IS
BEGIN
    MERGE INTO LATE_POLICY.MONTH_WISE_LATE_COUNT_WITH_DEDUCTION_EL tgt
    USING (
        SELECT 
            a.RML_ID,
            TO_CHAR(b.ATTN_DATE, 'MM-YYYY') AS MONTH_PERIOD,

            -- Count of late days
            COUNT(CASE WHEN NVL(b.STATUS, 'A') = 'L' THEN 1 END) AS TOTAL_LATE,

            -- Leave deduction from late
            FLOOR(COUNT(CASE WHEN NVL(b.STATUS, 'A') = 'L' THEN 1 END) / 3) AS DEDUCTION_EL,

            -- Present days
            COUNT(CASE WHEN NVL(b.STATUS, 'A') = 'P' THEN 1 END) AS TOTAL_PRESENT,

            -- Absent days
            COUNT(CASE WHEN NVL(b.STATUS, 'A') = 'A' THEN 1 END) AS UNAUTHORIZE_ABSENT

        FROM 
            DEVELOPERS.RML_HR_APPS_USER a
        JOIN 
            DEVELOPERS.RML_HR_ATTN_DAILY_PROC b ON a.RML_ID = b.RML_ID
        WHERE 
            a.IS_ACTIVE = 1
            AND b.ATTN_DATE IS NOT NULL
            AND TRUNC(b.ATTN_DATE) BETWEEN TO_DATE('01-05-2025', 'DD-MM-YYYY') AND TRUNC(SYSDATE)
        GROUP BY 
            a.RML_ID,
            TO_CHAR(b.ATTN_DATE, 'MM-YYYY')
    ) src
    ON (
        tgt.RML_ID = src.RML_ID AND tgt.MONTH_PERIOD = src.MONTH_PERIOD
    )
    WHEN MATCHED THEN
        UPDATE SET 
            tgt.TOTAL_LATE = src.TOTAL_LATE,
            tgt.DEDUCTION_EL = src.DEDUCTION_EL,
            tgt.TOTAL_PRESENT = src.TOTAL_PRESENT,
            tgt.UNAUTHORIZE_ABSENT = src.UNAUTHORIZE_ABSENT

    WHEN NOT MATCHED THEN
        INSERT (
            RML_ID, MONTH_PERIOD, TOTAL_LATE, DEDUCTION_EL, TOTAL_PRESENT, UNAUTHORIZE_ABSENT
        ) VALUES (
            src.RML_ID, src.MONTH_PERIOD, src.TOTAL_LATE, src.DEDUCTION_EL, src.TOTAL_PRESENT, src.UNAUTHORIZE_ABSENT
        );

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error in PROC_UPDATE_LATE_EL_DEDUCTION: ' || SQLERRM);
END;
/

