
INSERT INTO CUSTOMER_CODE_PROFILE.CUSTOMER_PROFILE (CUST_NAME, CUST_MOBILE, CUST_ADDRESS, CUST_CODE)
SELECT CUSTOMER_NAME, CUSTOMER_MOBILE_NO, PARTY_ADDRESS, PARTYCDE
FROM (
    SELECT CUSTOMER_NAME, CUSTOMER_MOBILE_NO, PARTY_ADDRESS, PARTYCDE,
           ROW_NUMBER() OVER (PARTITION BY PARTYCDE ORDER BY ROWID DESC) AS rn
    FROM DEVELOPERS.EMI_ERP_VIEW_DATA
    WHERE PARTYCDE IS NOT NULL
)
WHERE rn = 1
  AND PARTYCDE NOT IN (
      SELECT CUST_CODE FROM CUSTOMER_CODE_PROFILE.CUSTOMER_PROFILE
  );


INSERT INTO CUSTOMER_CODE_PROFILE.CODE_WISE_STATUS (CUST_CODE, REF_CODE, PAYMENT_MODE, CODE_STATUS,NUMBER_OF_DUE)
SELECT  PARTYCDE,REF_CODE, SALES_TYPE, STATUS, NUMBER_OF_DUE
FROM (
    SELECT PARTYCDE,REF_CODE, SALES_TYPE, STATUS, NUMBER_OF_DUE,
           ROW_NUMBER() OVER (PARTITION BY PARTYCDE ORDER BY ROWID DESC) AS rn
    FROM DEVELOPERS.EMI_ERP_VIEW_DATA
    WHERE PARTYCDE IS NOT NULL
)
WHERE rn = 1
  AND PARTYCDE NOT IN (
      SELECT CUST_CODE FROM CUSTOMER_CODE_PROFILE.CODE_WISE_STATUS;
  );


/// --insert data into CUSTOMER_CODE_PROFILE.CODE_WISE_STATUS table lat and lang from DEVELOPERS.RML_COLL_CUST_VISIT table

MERGE INTO CUSTOMER_CODE_PROFILE.CODE_WISE_STATUS dst
USING (
    SELECT *
    FROM (
        SELECT cws.REF_CODE,
               v.LATITUDE,
               v.LONGITUDE,
               ROW_NUMBER() OVER (ORDER BY cws.REF_CODE) AS rn
        FROM CUSTOMER_CODE_PROFILE.CODE_WISE_STATUS cws
        JOIN (
            SELECT REF_ID, LATITUDE, LONGITUDE,
                   ROW_NUMBER() OVER (PARTITION BY REF_ID ORDER BY ID DESC) AS rid
            FROM DEVELOPERS.RML_COLL_CUST_VISIT
        ) v ON v.REF_ID = cws.REF_CODE
        WHERE v.rid = 1
    )
    WHERE rn > 25000 AND rn <= 30000
) src
ON (dst.REF_CODE = src.REF_CODE)
WHEN MATCHED THEN
UPDATE SET dst.LAT = src.LATITUDE,
           dst.LANG = src.LONGITUDE;


select count (*) from CODE_WISE_STATUS;
--For example, if you want to skip 20 rows and take 10 rows (rows 21â€“30): WHERE rn > 20 AND rn <= 30

-- Step 1: Declare a cursor to fetch data
DECLARE
   CURSOR cur_requests IS
      SELECT ID, EMP_ID
        FROM RML_TA_DA.TRAVEL_REQUESTS;

   v_designation   RML_HR_APPS_USER.DESIGNATION%TYPE;
   v_branch        RML_HR_APPS_USER.BRANCH_NAME%TYPE;
   v_base_role     VARCHAR2(20);
   v_metro_area    VARCHAR2(50);
   v_ta_bill       NUMBER := 0;
BEGIN
   FOR req IN cur_requests LOOP
      BEGIN
         -- Get designation and branch
         SELECT DESIGNATION, BRANCH_NAME
           INTO v_designation, v_branch
           FROM RML_HR_APPS_USER
          WHERE RML_ID = req.EMP_ID
            AND ROWNUM = 1;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            v_designation := 'Unknown';
            v_branch := NULL;
      END;

      -- Normalize designation to base role
      IF v_designation LIKE '%Manager%' THEN
         v_base_role := 'Manager';
      ELSIF v_designation LIKE '%Executive%' THEN
         v_base_role := 'Executive';
      ELSE
         v_base_role := 'Others';
      END IF;

      -- Determine metro area
      IF v_branch IN ('Rangs Center', 'Head Office', 'Jatrabari', 'Keraniganj', 'Dhaka Ho', 'Tejgaon') THEN
         v_metro_area := 'DHAKA_METRO';
      ELSIF v_branch IN ('Chattogram', 'Chittagong') THEN
         v_metro_area := 'CHITTAGONG_METRO';
      ELSE
         v_metro_area := 'Others';
      END IF;

      -- Lookup TA_BILL
      BEGIN
         SELECT TA_BILL
           INTO v_ta_bill
           FROM RML_TA_DA.BILLING_CONFIG
          WHERE DESIGNATION = v_base_role
            AND MATRO_AREA = v_metro_area
            AND ROWNUM = 1;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            v_ta_bill := 0;
      END;

      -- Final Update
      UPDATE RML_TA_DA.TRAVEL_REQUESTS
         SET DESIGNATION = v_designation,
             METRO_AREA = v_metro_area,
             SETTLEMENT_DISTANCE_RATE = v_ta_bill
       WHERE ID = req.ID;

   END LOOP;
   COMMIT;
END;
/
