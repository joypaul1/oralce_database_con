TBL_ROLES – Stores different user roles (e.g., Employee, Line Manager, BU Head, Admin, Finance, etc.).

TBL_DEPARTMENTS – Holds department information.

TBL_EMPLOYEES – Contains employee data, linked to roles and departments.

TBL_TRAVEL_REQUESTS – Tracks travel requests (domestic/overseas, adjacent district flag, personal vacation flag, etc.).

TBL_REQUEST_APPROVALS – Records approval steps (Line Manager, BU Head, CXO) for each travel request.

TBL_POLICY_RULES – Maintains overarching TA/DA policies (can store textual rules or reference to more detailed docs).

TBL_ADMIN_TICKETS – Stores flight ticket details issued by the Admin Desk after approval.

TBL_CLAIMS – Represents post-travel claims for reimbursements.

TBL_TRAVEL_EXPENSES – Itemized expenses under a single claim (hotel bills, transportation, etc.).

TBL_EXCEPTIONS – Captures any policy exceptions (e.g., personal vacation, over-budget travel) that require higher-level approval.
--------------------------------------------------------------------------
-- 1. ROLES
--------------------------------------------------------------------------
CREATE TABLE TBL_ROLES (
    ROLE_ID          NUMBER GENERATED ALWAYS AS IDENTITY,
    ROLE_NAME        VARCHAR2(100)  NOT NULL,
    ROLE_DESCRIPTION VARCHAR2(255),
    CONSTRAINT PK_ROLES PRIMARY KEY (ROLE_ID)
);

--------------------------------------------------------------------------
-- 2. DEPARTMENTS
--------------------------------------------------------------------------
CREATE TABLE TBL_DEPARTMENTS (
    DEPARTMENT_ID    NUMBER GENERATED ALWAYS AS IDENTITY,
    DEPARTMENT_NAME  VARCHAR2(100)  NOT NULL,
    -- Optionally link head of department to TBL_EMPLOYEES
    HEAD_OF_DEPARTMENT NUMBER,
    CONSTRAINT PK_DEPARTMENTS PRIMARY KEY (DEPARTMENT_ID)
);

--------------------------------------------------------------------------
-- 3. EMPLOYEES
--------------------------------------------------------------------------
CREATE TABLE TBL_EMPLOYEES (
    EMPLOYEE_ID   NUMBER GENERATED ALWAYS AS IDENTITY,
    FIRST_NAME    VARCHAR2(100) NOT NULL,
    LAST_NAME     VARCHAR2(100) NOT NULL,
    ROLE_ID       NUMBER        NOT NULL,
    DEPARTMENT_ID NUMBER,
    EMAIL         VARCHAR2(100),
    PHONE         VARCHAR2(50),
    CONSTRAINT PK_EMPLOYEES PRIMARY KEY (EMPLOYEE_ID),
    CONSTRAINT FK_EMPLOYEES_ROLES 
        FOREIGN KEY (ROLE_ID) 
        REFERENCES TBL_ROLES (ROLE_ID),
    CONSTRAINT FK_EMPLOYEES_DEPTS 
        FOREIGN KEY (DEPARTMENT_ID) 
        REFERENCES TBL_DEPARTMENTS (DEPARTMENT_ID)
);

-- Optional: Link HEAD_OF_DEPARTMENT in TBL_DEPARTMENTS to an EMPLOYEE_ID
ALTER TABLE TBL_DEPARTMENTS
    ADD CONSTRAINT FK_DEPARTMENTS_HEAD
    FOREIGN KEY (HEAD_OF_DEPARTMENT)
    REFERENCES TBL_EMPLOYEES (EMPLOYEE_ID);

--------------------------------------------------------------------------
-- 4. TRAVEL REQUESTS
--------------------------------------------------------------------------
CREATE TABLE TBL_TRAVEL_REQUESTS (
    REQUEST_ID           NUMBER GENERATED ALWAYS AS IDENTITY,
    EMPLOYEE_ID          NUMBER        NOT NULL,
    REQUEST_DATE         DATE          DEFAULT SYSDATE NOT NULL,
    TRAVEL_START_DATE    DATE          NOT NULL,
    TRAVEL_END_DATE      DATE          NOT NULL,
    DESTINATION          VARCHAR2(200),
    PURPOSE              VARCHAR2(500),
    BUDGET_ESTIMATE      NUMBER(10,2),
    REQUEST_STATUS       VARCHAR2(50)  DEFAULT 'PENDING',  -- e.g. PENDING, APPROVED, REJECTED
    IS_DOMESTIC          CHAR(1)       DEFAULT 'N' 
        CHECK (IS_DOMESTIC IN ('Y','N')),
    IS_ADJACENT_DISTRICT CHAR(1)       DEFAULT 'N' 
        CHECK (IS_ADJACENT_DISTRICT IN ('Y','N')),
    PERSONAL_VACATION    CHAR(1)       DEFAULT 'N'
        CHECK (PERSONAL_VACATION IN ('Y','N')),
    CONSTRAINT PK_TRAVEL_REQUESTS PRIMARY KEY (REQUEST_ID),
    CONSTRAINT FK_TRAVEL_REQUESTS_EMP 
        FOREIGN KEY (EMPLOYEE_ID) 
        REFERENCES TBL_EMPLOYEES (EMPLOYEE_ID)
);

--------------------------------------------------------------------------
-- 5. REQUEST APPROVALS
--------------------------------------------------------------------------
CREATE TABLE TBL_REQUEST_APPROVALS (
    APPROVAL_ID    NUMBER GENERATED ALWAYS AS IDENTITY,
    REQUEST_ID     NUMBER NOT NULL,
    APPROVER_ID    NUMBER NOT NULL,
    APPROVAL_STATUS VARCHAR2(50) DEFAULT 'PENDING', -- e.g. PENDING, APPROVED, REJECTED
    APPROVAL_DATE   DATE,
    REMARKS         VARCHAR2(500),
    CONSTRAINT PK_REQUEST_APPROVALS PRIMARY KEY (APPROVAL_ID),
    CONSTRAINT FK_APPROVALS_REQUEST
        FOREIGN KEY (REQUEST_ID) 
        REFERENCES TBL_TRAVEL_REQUESTS (REQUEST_ID),
    CONSTRAINT FK_APPROVALS_EMP
        FOREIGN KEY (APPROVER_ID) 
        REFERENCES TBL_EMPLOYEES (EMPLOYEE_ID)
);

--------------------------------------------------------------------------
-- 6. POLICY RULES
--------------------------------------------------------------------------
CREATE TABLE TBL_POLICY_RULES (
    POLICY_ID          NUMBER GENERATED ALWAYS AS IDENTITY,
    POLICY_NAME        VARCHAR2(200) NOT NULL,
    POLICY_DESCRIPTION CLOB,
    EFFECTIVE_DATE     DATE          NOT NULL,
    EXPIRY_DATE        DATE,
    ACTIVE_FLAG        CHAR(1)       DEFAULT 'Y' 
       CHECK (ACTIVE_FLAG IN ('Y','N')),
    CONSTRAINT PK_POLICY_RULES PRIMARY KEY (POLICY_ID)
);

--------------------------------------------------------------------------
-- 7. ADMIN TICKETS (Issued by Admin Desk)
--------------------------------------------------------------------------
CREATE TABLE TBL_ADMIN_TICKETS (
    TICKET_ID     NUMBER GENERATED ALWAYS AS IDENTITY,
    REQUEST_ID    NUMBER NOT NULL,
    ISSUED_BY     NUMBER NOT NULL,   -- Admin employee who issued the ticket
    TICKET_NUMBER VARCHAR2(50),
    DEPARTURE_DATE DATE,
    ARRIVAL_DATE   DATE,
    COST           NUMBER(10,2),
    CLASS_TYPE     VARCHAR2(20) 
       CHECK (CLASS_TYPE IN ('ECONOMY','BUSINESS','OTHER')),
    CONSTRAINT PK_ADMIN_TICKETS PRIMARY KEY (TICKET_ID),
    CONSTRAINT FK_ADMIN_TICKETS_REQUEST
        FOREIGN KEY (REQUEST_ID) 
        REFERENCES TBL_TRAVEL_REQUESTS (REQUEST_ID),
    CONSTRAINT FK_ADMIN_TICKETS_ISSUEDBY
        FOREIGN KEY (ISSUED_BY) 
        REFERENCES TBL_EMPLOYEES (EMPLOYEE_ID)
);

--------------------------------------------------------------------------
-- 8. CLAIMS (Employee Reimbursement Claims)
--------------------------------------------------------------------------
CREATE TABLE TBL_CLAIMS (
    CLAIM_ID            NUMBER GENERATED ALWAYS AS IDENTITY,
    REQUEST_ID          NUMBER NOT NULL,
    SUBMITTED_BY        NUMBER NOT NULL, -- Typically the same as TRAVEL_REQUESTS.EMPLOYEE_ID
    SUBMISSION_DATE     DATE   DEFAULT SYSDATE NOT NULL,
    TOTAL_CLAIMED_AMOUNT NUMBER(10,2),
    STATUS             VARCHAR2(50) DEFAULT 'PENDING',  -- e.g. PENDING, APPROVED, REJECTED, PAID
    CONSTRAINT PK_CLAIMS PRIMARY KEY (CLAIM_ID),
    CONSTRAINT FK_CLAIMS_REQUEST
        FOREIGN KEY (REQUEST_ID) 
        REFERENCES TBL_TRAVEL_REQUESTS (REQUEST_ID),
    CONSTRAINT FK_CLAIMS_EMP
        FOREIGN KEY (SUBMITTED_BY) 
        REFERENCES TBL_EMPLOYEES (EMPLOYEE_ID)
);

--------------------------------------------------------------------------
-- 9. TRAVEL EXPENSES (Itemized expenses for each claim)
--------------------------------------------------------------------------
CREATE TABLE TBL_TRAVEL_EXPENSES (
    EXPENSE_ID       NUMBER GENERATED ALWAYS AS IDENTITY,
    CLAIM_ID         NUMBER NOT NULL,
    EXPENSE_TYPE     VARCHAR2(50),  -- e.g. HOTEL, TRANSPORT, FUEL, MEALS, MISC
    EXPENSE_AMOUNT   NUMBER(10,2),
    EXPENSE_DATE     DATE,
    RECEIPT_ATTACHMENT BLOB,       -- Optional: store receipts if needed
    REMARKS          VARCHAR2(500),
    CONSTRAINT PK_TRAVEL_EXPENSES PRIMARY KEY (EXPENSE_ID),
    CONSTRAINT FK_EXPENSES_CLAIMS
        FOREIGN KEY (CLAIM_ID) 
        REFERENCES TBL_CLAIMS (CLAIM_ID)
);

--------------------------------------------------------------------------
-- 10. EXCEPTIONS (Policy Exceptions)
--------------------------------------------------------------------------
CREATE TABLE TBL_EXCEPTIONS (
    EXCEPTION_ID      NUMBER GENERATED ALWAYS AS IDENTITY,
    REQUEST_ID        NUMBER NOT NULL,
    EXCEPTION_REASON  VARCHAR2(500),    -- e.g. personal vacation, short-notice, cost overrun
    APPROVAL_STATUS   VARCHAR2(50) DEFAULT 'PENDING',  -- e.g. PENDING, APPROVED, REJECTED
    APPROVED_BY       NUMBER,
    APPROVAL_DATE     DATE,
    CONSTRAINT PK_EXCEPTIONS PRIMARY KEY (EXCEPTION_ID),
    CONSTRAINT FK_EXCEPTIONS_REQUEST
        FOREIGN KEY (REQUEST_ID) 
        REFERENCES TBL_TRAVEL_REQUESTS (REQUEST_ID),
    CONSTRAINT FK_EXCEPTIONS_EMP
        FOREIGN KEY (APPROVED_BY) 
        REFERENCES TBL_EMPLOYEES (EMPLOYEE_ID)
);
3. Explanation of Key Relationships
Employees ↔ Roles

Each employee is assigned one role (Employee, Manager, Admin, etc.).

TBL_EMPLOYEES.ROLE_ID → TBL_ROLES.ROLE_ID

Employees ↔ Departments

Each employee belongs to a department.

Each department can optionally have a Head of Department linked back to an employee.

Travel Requests

Created by an employee (EMPLOYEE_ID).

Has flags for domestic or adjacent district to block TA/DA, and personal vacation.

Request Approvals

Each request can have multiple approvals (Line Manager, BU Head, CXO).

Linked to TBL_TRAVEL_REQUESTS by REQUEST_ID and the approving employee (APPROVER_ID).

Policy Rules

Central repository for overarching policy data.

You can store textual descriptions or structured rules (like “No TA/DA for adjacent districts”).

Admin Tickets

Once a request is approved, Admin Desk issues tickets, stored here with cost and flight details.

Claims & Expenses

An employee submits a claim after the trip, referencing the original REQUEST_ID.

Each claim can have multiple itemized expenses in TBL_TRAVEL_EXPENSES.

Exceptions

Any policy exceptions (e.g., short-notice travel, personal vacation, cost overrun) are captured here.

Approval status is tracked separately and can require special sign-off.

4. Additional Considerations
Indexes: Add indexes on frequently queried columns (e.g., EMPLOYEE_ID, REQUEST_STATUS, APPROVAL_STATUS, CLAIM_ID) to improve performance.

Sequences (Older Oracle Versions): If your Oracle version does not support identity columns, replace them with sequences and triggers.

Security & Access Control:

Implement role-based privileges so that only authorized roles can approve requests, issue tickets, or process reimbursements.

Data Validation & Constraints:

You can add more CHECK constraints to enforce business logic (e.g., ensuring that TRAVEL_END_DATE >= TRAVEL_START_DATE).

Auditing:

For regulatory compliance, consider Oracle’s auditing features or add audit tables/triggers to log changes.



INSERT INTO CUSTOMER_CODE_PROFILE.CUSTOMER_PROFILE (CUST_NAME, CUST_MOBILE, CUST_ADDRESS, CUST_CODE)
SELECT CUSTOMER_NAME, CUSTOMER_MOBILE_NO, PARTY_ADDRESS, PARTYCDE
FROM (
    SELECT CUSTOMER_NAME, CUSTOMER_MOBILE_NO, PARTY_ADDRESS, PARTYCDE,
           ROW_NUMBER() OVER (PARTITION BY PARTYCDE ORDER BY ROWID DESC) AS rn
    FROM DEVELOPERS.EMI_ERP_VIEW_DATA
    WHERE PARTYCDE IS NOT NULL
)
WHERE rn = 1
  AND PARTYCDE NOT IN (
      SELECT CUST_CODE FROM CUSTOMER_CODE_PROFILE.CUSTOMER_PROFILE
  );



INSERT INTO CUSTOMER_CODE_PROFILE.CODE_WISE_STATUS (CUST_CODE, REF_CODE, PAYMENT_MODE, CODE_STATUS,NUMBER_OF_DUE)
SELECT  PARTYCDE,REF_CODE, SALES_TYPE, STATUS, NUMBER_OF_DUE
FROM (
    SELECT PARTYCDE,REF_CODE, SALES_TYPE, STATUS, NUMBER_OF_DUE,
           ROW_NUMBER() OVER (PARTITION BY PARTYCDE ORDER BY ROWID DESC) AS rn
    FROM DEVELOPERS.EMI_ERP_VIEW_DATA
    WHERE PARTYCDE IS NOT NULL
)
WHERE rn = 1
  AND PARTYCDE NOT IN (
      SELECT CUST_CODE FROM CUSTOMER_CODE_PROFILE.CODE_WISE_STATUS;
  );